"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Constants
var PATH = "//source.unsplash.com";
var USER = "user";
var COLLECTION = "collection";
var DAILY = "daily";
var RANDOM = "random";
var WIDTH = 1080;
var HEIGHT = 720;
var DEFAULT_STYLES = {
  backgroundRepeat: "no-repeat",
  backgroundSize: "cover",
  display: "flex",
  flexDirection: "column",
  justifyContent: "center",
  alignItems: "center",
  margin: "auto"
};
var EXPAND_STYLES = {
  position: "absolute",
  top: 0,
  right: 0,
  bottom: 0,
  left: 0,
  margin: 0

  // Helper to generate url for unsplash
};var generateUrl = function generateUrl(_ref) {
  var username = _ref.username,
      width = _ref.width,
      height = _ref.height,
      photoId = _ref.photoId,
      collectionId = _ref.collectionId,
      keywords = _ref.keywords,
      fixed = _ref.fixed;

  var url = [PATH];

  if (fixed) return url.push(DAILY).join("/");

  if (username) url.push(USER, username);
  if (!username && collectionId) url.push(COLLECTION, collectionId);
  if (!username && !collectionId && photoId) url.push(photoId);
  if (!username && !photoId && !collectionId && !keywords) url.push(RANDOM);

  url.push(width + "x" + height);

  if (keywords) url.push("?" + keywords.replace(/\s/g, ""));

  return url.join("/");
};

var Unsplash = function Unsplash(_ref2) {
  var children = _ref2.children,
      photoId = _ref2.photoId,
      collectionId = _ref2.collectionId,
      username = _ref2.username,
      expand = _ref2.expand,
      fixed = _ref2.fixed,
      img = _ref2.img,
      keywords = _ref2.keywords,
      style = _ref2.style,
      width = _ref2.width,
      height = _ref2.height;

  if (typeof width === "string") width = parseInt(width, 10);
  if (typeof height === "string") height = parseInt(height, 10);

  var urlWidth = style && style.width || width;
  var urlHeight = style && style.height || height;

  var url = encodeURI(generateUrl({
    username: username,
    collectionId: collectionId,
    photoId: photoId,
    keywords: keywords,
    fixed: fixed,
    width: urlWidth,
    height: urlHeight
  }));

  var imageStyles = _extends({
    width: width,
    height: height
  }, style);

  var backgroundStyles = _extends({}, DEFAULT_STYLES, {
    backgroundImage: "url(" + url + ")"
  });

  if (expand) {
    backgroundStyles = _extends({}, backgroundStyles, EXPAND_STYLES);
  } else {
    backgroundStyles = _extends({}, backgroundStyles, {
      width: width,
      height: height
    }, style);
  }

  return img ? _react2.default.createElement("img", { src: url, style: imageStyles }) : _react2.default.createElement(
    "div",
    { style: backgroundStyles },
    children
  );
};

Unsplash.propTypes = {
  children: _propTypes2.default.node,
  collectionId: _propTypes2.default.number,
  username: _propTypes2.default.string,
  keywords: _propTypes2.default.string,
  expand: _propTypes2.default.bool,
  fixed: _propTypes2.default.bool,
  img: _propTypes2.default.bool,
  style: _propTypes2.default.object,
  width: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  height: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])
};

Unsplash.defaultProps = {
  expand: false,
  fixed: false,
  img: false,
  width: WIDTH,
  height: HEIGHT
};

exports.default = Unsplash;